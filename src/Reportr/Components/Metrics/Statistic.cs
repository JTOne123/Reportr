namespace Reportr.Components.Metrics
{
    using Reportr.Data.Querying;
    using System;
    
    /// <summary>
    /// Represents the default implementation for a statistic
    /// </summary>
    public class Statistic : ReportComponentOutputBase, IStatistic
    {
        /// <summary>
        /// Constructs the statistic with the details
        /// </summary>
        /// <param name="definition">The statistic definition</param>
        /// <param name="results">The query results</param>
        /// <param name="value">The value calculated</param>
        public Statistic
            (
                StatisticDefinition definition,
                QueryResults results,
                double value
            )

            : base(definition, results)
        {
            Validate.IsNotNull(definition);
            
            this.Value = value;
            this.HasRange = false;
        }
        
        /// <summary>
        /// Gets the value generated by the statistic
        /// </summary>
        public double Value { get; private set; }

        /// <summary>
        /// Gets the lower range value
        /// </summary>
        public double? LowerRange { get; private set; }

        /// <summary>
        /// Gets the upper range value
        /// </summary>
        public double? UpperRange { get; private set; }

        /// <summary>
        /// Gets a flag indicating if the value has a range that it fits into
        /// </summary>
        public bool HasRange { get; private set; }

        /// <summary>
        /// Adds the range values to the statistic result
        /// </summary>
        /// <param name="lower">The lower range</param>
        /// <param name="upper">The upper range</param>
        /// <returns>The updated statistic result</returns>
        public Statistic WithRange
            (
                double? lower,
                double? upper
            )
        {
            if (lower == null && upper == null)
            {
                throw new InvalidOperationException
                (
                    "A lower or upper range value must be specified."
                );
            }

            this.LowerRange = lower;
            this.UpperRange = upper;
            this.HasRange = true;

            return this;
        }
    }
}
