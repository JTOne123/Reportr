namespace Reportr.Data.Querying
{
    using Nito.AsyncEx.Synchronous;
    using Reportr.Filtering;
    using System;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.Linq;
    using System.Threading.Tasks;

    /// <summary>
    /// Represents a base implementation for a report query
    /// </summary>
    public abstract class QueryBase : IQuery
    {
        private Dictionary<string, QuerySortingRule> _sortingRules;
        private Dictionary<string, QueryGroupingRule> _groupingRules;

        /// <summary>
        /// Constructs the query with a data source
        /// </summary>
        /// <param name="dataSource">The data source</param>
        /// <param name="maximumRows">The maximum rows (optional)</param>
        public QueryBase
            (
                IDataSource dataSource,
                int? maximumRows = null
            )
        {
            Validate.IsNotNull(dataSource);

            _sortingRules = new Dictionary<string, QuerySortingRule>
            (
                StringComparer.OrdinalIgnoreCase
            );

            _groupingRules = new Dictionary<string, QueryGroupingRule>
            (
                StringComparer.OrdinalIgnoreCase
            );

            this.QueryId = Guid.NewGuid();
            this.DataSource = dataSource;
            this.MaximumRows = maximumRows;
        }

        /// <summary>
        /// Gets the unique ID of the query
        /// </summary>
        public Guid QueryId { get; private set; }

        /// <summary>
        /// Gets the name of the query
        /// </summary>
        public virtual string Name
        {
            get
            {
                return this.GetType().Name.Replace
                (
                    "Query",
                    String.Empty
                );
            }
        }

        /// <summary>
        /// Gets the data source being used by the query
        /// </summary>
        public IDataSource DataSource { get; private set; }

        /// <summary>
        /// Gets an array of the columns generated by the query
        /// </summary>
        public abstract QueryColumnInfo[] Columns { get; }

        /// <summary>
        /// Gets an array of parameters accepted by the component
        /// </summary>
        public abstract ParameterInfo[] Parameters { get; }

        /// <summary>
        /// Gets the maximum number of rows the query will return
        /// </summary>
        /// <remarks>
        /// This is optional and, if null, all rows are returned.
        /// </remarks>
        public int? MaximumRows { get; protected set; }

        /// <summary>
        /// Gets an array of sorting rules for the query
        /// </summary>
        public QuerySortingRule[] SortingRules
        {
            get
            {
                var rules = _sortingRules.Select
                (
                    pair => pair.Value
                );

                return rules.ToArray();
            }
        }

        /// <summary>
        /// Specifies a sorting rule against a column in the query
        /// </summary>
        /// <param name="columnName">The column name</param>
        /// <param name="direction">The sort direction</param>
        public void SortColumn
            (
                string columnName,
                SortDirection direction
            )
        {
            Validate.IsNotEmpty(columnName);

            var columnFound = this.Columns.Any
            (
                info => info.Column.Name.ToLower() == columnName.ToLower()
            );

            if (false == columnFound)
            {
                var message = "The column '{0}' does not exist.";

                throw new InvalidOperationException
                (
                    String.Format
                    (
                        message,
                        columnName
                    )
                );
            }
            
            var rule = new QuerySortingRule
            (
                columnName,
                direction
            );

            _sortingRules[columnName] = rule;
        }

        /// <summary>
        /// Gets an array of grouping rules for the query
        /// </summary>
        public QueryGroupingRule[] GroupingRules
        {
            get
            {
                var rules = _groupingRules.Select
                (
                    pair => pair.Value
                );

                return rules.ToArray();
            }
        }

        /// <summary>
        /// Adds a grouping rule to the query
        /// </summary>
        /// <param name="columnName">The column name</param>
        /// <param name="direction">The sort direction</param>
        public void AddGrouping
            (
                string columnName,
                SortDirection direction
            )
        {
            Validate.IsNotEmpty(columnName);

            var columnFound = this.Columns.Any
            (
                info => info.Column.Name.ToLower() == columnName.ToLower()
            );

            if (false == columnFound)
            {
                var message = "The column '{0}' does not exist.";

                throw new InvalidOperationException
                (
                    String.Format
                    (
                        message,
                        columnName
                    )
                );
            }
            
            var rule = new QueryGroupingRule
            (
                columnName,
                direction
            );

            _groupingRules[columnName] = rule;
        }

        /// <summary>
        /// Executes the query using the parameter values supplied
        /// </summary>
        /// <param name="parameterValues">The parameter values</param>
        /// <returns>The query results</returns>
        public virtual QueryResults Execute
            (
                params ParameterValue[] parameterValues
            )
        {
            var task = ExecuteAsync(parameterValues);

            return task.WaitAndUnwrapException();
        }

        /// <summary>
        /// Asynchronously executes the query using the parameter values supplied
        /// </summary>
        /// <param name="parameterValues">The parameter values</param>
        /// <returns>The query results</returns>
        public virtual async Task<QueryResults> ExecuteAsync
            (
                params ParameterValue[] parameterValues
            )
        {
            var watch = Stopwatch.StartNew();

            if (parameterValues == null)
            {
                parameterValues = new ParameterValue[] { };
            }

            var parameterErrors = ValidateParameterValues
            (
                parameterValues
            );

            if (parameterErrors.Any())
            {
                var results = new QueryResults
                (
                    this,
                    0,
                    false
                );

                return results.WithErrors
                (
                    parameterErrors
                );
            }
            else
            {
                var rows = await FetchDataAsync
                (
                    parameterValues
                );

                rows = SortRows(rows);

                var groupings = GroupRows(rows);

                watch.Stop();

                var executionTime = watch.ElapsedMilliseconds;

                var results = new QueryResults
                (
                    this,
                    executionTime
                );

                return results.WithData
                (
                    groupings
                );
            }
        }

        /// <summary>
        /// Asynchronously fetches the query data using the parameter values
        /// </summary>
        /// <param name="parameterValues">The parameter values</param>
        /// <returns>The query data in the form of an array of rows</returns>
        protected abstract Task<IEnumerable<QueryRow>> FetchDataAsync
        (
            params ParameterValue[] parameterValues
        );

        /// <summary>
        /// Sorts a collection of rows by the queries sorting rules
        /// </summary>
        /// <param name="rows">The rows to sort</param>
        /// <returns>A collection of sorted rows</returns>
        protected virtual IEnumerable<QueryRow> SortRows
            (
                IEnumerable<QueryRow> rows
            )
        {
            Validate.IsNotNull(rows);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Groups a collection of rows by the queries grouping rules
        /// </summary>
        /// <param name="rows">The rows to group</param>
        /// <returns>An array of query groupings</returns>
        protected virtual QueryGrouping[] GroupRows
            (
                IEnumerable<QueryRow> rows
            )
        {
            Validate.IsNotNull(rows);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Validates parameter values against the query
        /// </summary>
        /// <param name="parameterValues">The parameter values</param>
        /// <returns>A dictionary of errors generated</returns>
        private IDictionary<string, string> ValidateParameterValues
            (
                params ParameterValue[] parameterValues
            )
        {
            var errors = new Dictionary<string, string>();
            var parameters = this.Parameters;

            foreach (var value in parameterValues)
            {
                var parameterName = value.Parameter.Name;

                var matchingParameter = parameters.FirstOrDefault
                (
                    p => p.Name.ToLower() == parameterName.ToLower()
                );

                if (matchingParameter == null)
                {
                    var message = "'{0}' did not match any parameters in the query '{1}'.";

                    errors.Add
                    (
                        parameterName,
                        String.Format
                        (
                            message,
                            parameterName,
                            this.Name
                        )
                    );
                }
                else
                {
                    // Ensure all parameter values match the expected type
                    if (value.Value != null)
                    {
                        var actualType = value.Value.GetType();

                        if (matchingParameter.ExpectedType != actualType)
                        {
                            var canConvert = actualType.CanConvert
                            (
                                matchingParameter.ExpectedType,
                                value.Value
                            );

                            if (false == canConvert)
                            {
                                var message = "The type {0} is not valid for the parameter '{1}'.";

                                errors.Add
                                (
                                    parameterName,
                                    String.Format
                                    (
                                        message,
                                        actualType.Name,
                                        parameterName
                                    )
                                );
                            }
                        }
                    }
                }
            }
            
            // Ensure all required parameters have been supplied
            foreach (var parameter in parameters)
            {
                if (parameter.ValueRequired)
                {
                    var valueFound = parameterValues.Any
                    (
                        value => value.Name.ToLower() == parameter.Name.ToLower() 
                            && value.Value != null
                    );

                    if (false == valueFound)
                    {
                        var message = "A value is required for the parameter '{1}'.";

                        errors.Add
                        (
                            parameter.Name,
                            String.Format
                            (
                                message,
                                parameter.Name
                            )
                        );
                    }
                }
            }

            return errors;
        }
    }
}
